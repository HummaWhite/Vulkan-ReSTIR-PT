#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "HostDevice.h"

layout(local_size_x = RayQueryBlockSizeX, local_size_y = RayQueryBlockSizeY) in;

#include "ray_query.glsl"
#include "camera.glsl"
#include "gbuffer_util.glsl"
#include "light_sampling.glsl"
#include "material.glsl"
#include "gris_reservoir.glsl"

const uint Temporal = 0;
const uint Spatial = 1;

struct GRISRetraceSettings {
    uint mode;
    uint writeIndex;
    float rrScale;
};

layout(push_constant) uniform _PushConstant {
    GRISRetraceSettings uSettings;
};

vec3 traceReplayPathForHybridShift(SurfaceInfo surf, Ray ray, uint targetPathFlags, uint rng, out Intersection rcPrevIsec, out vec3 rcPrevWo) {
    const int MaxTracingDepth = 15;

    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    vec3 lastPos;
    vec3 wo = -ray.dir;
    bool isLastVertexConnectible = false;
    bool rcVertexFound = false;
    uint rcVertexId = 0;

    Material mat = uMaterials[surf.matIndex];
    BSDFSample s;
    Intersection isec;

    GRISPathSample pathSample;

    #pragma unroll
    for (int bounce = 0; bounce < MaxTracingDepth; bounce++) {
        GRISPathFlagsSetPathLength(pathSample.flags, bounce + 1);

        if (bounce > 0) {
            isec = rayQueryTraceClosestHit(
                uTLAS,
                gl_RayFlagsOpaqueEXT, 0xff,
                ray.ori, MinRayDistance, ray.dir, MaxRayDistance
            );

            if (!IntersectionIsValid(isec)) {
                break;
            }
            loadSurfaceInfo(isec, surf);
            mat = uMaterials[surf.matIndex];
        }

        float cosPrevWi = dot(ray.dir, surf.norm);
        float distToPrev = distance(lastPos, surf.pos);
        float geometryJacobian = abs(cosPrevWi) / square(distToPrev);

        if (surf.isLight) {
            if (/* cosPrevWi < 0 */ true) {
                float weight = 1.0;
                float sumPower = uLightSampleTable[0].prob;
                float lightPdf = luminance(surf.albedo) / sumPower / geometryJacobian;

                if (bounce > 0 && !isSampleTypeDelta(s.type)) {
                    weight = MISWeight(s.pdf, lightPdf);
                }
                if (rcVertexFound) {
                    if (bounce == rcVertexId + 1) {
                        // the scattered ray at rcVertex hits a light source
                        pathSample.rcVertexLi = surf.albedo;
                        pathSample.F = surf.albedo * throughput;
                        radiance += surf.albedo * throughput;
                    }
                    else {
                        // the scattered ray after rcVertex indirectly hits a light source
                        pathSample.F += surf.albedo * weight * throughput;
                        radiance += surf.albedo * weight * throughput;
                    }
                }
                else {
                    radiance += surf.albedo * weight * throughput;
                }
            }
        }
        bool isThisVertexConnectible = isBSDFConnectible(mat);

        if (!rcVertexFound && isLastVertexConnectible && isThisVertexConnectible && distToPrev > GRISDistanceThreshold) {
            // found an rcVertex that satisfy connectibility conditions
            // it can either be a regular surface, or an emitter
            // if emitter, the emittance is recorded and the path is terminated
            rcVertexFound = true;

            pathSample.rcVertexIsec = isec;
            pathSample.rcVertexRng = rng;
            pathSample.rcPrevScatterPdf = s.pdf;
            pathSample.rcGeometryTerm = geometryJacobian;
            pathSample.rcVertexLi = surf.isLight ? surf.albedo : vec3(0.0);

            rcVertexId = bounce;
            GRISPathFlagsSetRcVertexId(pathSample.flags, rcVertexId);
        }

        if (surf.isLight) {
            break;
        }
        // make sure sample space is aligned for all paths
        vec4 lightRandSample = sample4f(rng);

        if (/* sample direct lighting */ bounce > 0 && !isBSDFDelta(mat)) {
            const uint shadowRayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT;

            vec3 lightRadiance, lightDir;
            float lightDist, lightPdf;

            lightRadiance = sampleLight(surf.pos, lightDir, lightDist, lightPdf, lightRandSample);

            bool shadowed = rayQueryTraceShadow(
                uTLAS,
                shadowRayFlags, 0xff,
                surf.pos, MinRayDistance, lightDir, lightDist - MinRayDistance
            );

            if (!shadowed && lightPdf > 1e-6) {
                float bsdfPdf = absDot(surf.norm, lightDir) * PiInv;
                float weight = MISWeight(lightPdf, bsdfPdf);
                vec3 lightTerms = lightRadiance * evalBSDF(mat, surf.albedo, surf.norm, wo, lightDir) * satDot(surf.norm, lightDir) / lightPdf;

                if (rcVertexFound) {
                    // if successfully sampled a light source and an rcVertex is found priorly
                    if (bounce == rcVertexId) {
                        // if rcVertex is the same as our reference point, mark its type as direct light sampling at rcVertex (isNEE = true)
                        // in theory we can continue tracing another BSDF sample (indirect lighting at rcVertex), and do RIS to choose one
                        //   between
                        // for simplicity we can just terminate here
                        // and I doubt if it worths to have multiple sample candidates of longer path, since they are harder to connect to
                        pathSample.rcVertexLi = lightRadiance;
                        pathSample.rcVertexWi = lightDir;
                        pathSample.rcLightPdf = lightPdf;
                        GRISPathFlagsSetIsNEE(pathSample.flags, true);
                        pathSample.F = lightTerms * throughput;
                        radiance += lightTerms * throughput;
                        break;
                    }
                    else {
                        // otherwise, it is not NEE, we continue the path to collect radiance from lights
                        pathSample.F += lightTerms * weight * throughput;
                    }
                }
                radiance += lightTerms * weight * throughput;
            }
        }
        bool skipRouletteForRcVertex = (rcVertexFound && (bounce == rcVertexId));

        if (/* russian roulette */ bounce > 4 && !skipRouletteForRcVertex) {
            float pdfTerminate = max(1.0 - luminance(throughput) * uSettings.rrScale, 0);

            if (sample1f(rng) < pdfTerminate) {
                break;
            }
            throughput /= (1.0 - pdfTerminate);
        }

        if (!sampleBSDF(mat, surf.albedo, surf.norm, wo, sample3f(rng), s) || s.pdf < 1e-6) {
            break;
        }

        float cosTheta = isSampleTypeDelta(s.type) ? 1.0 : absDot(surf.norm, s.wi);
        vec3 scatterTerm = s.bsdf * cosTheta / s.pdf;
        throughput *= scatterTerm;

        if (rcVertexFound) {
            if (bounce == rcVertexId) {
                pathSample.rcVertexWi = s.wi;
                pathSample.rcScatterPdf = s.pdf;
            }
            else {
            }
        }

        lastPos = surf.pos;
        wo = -s.wi;
        ray.dir = s.wi;
        ray.ori = surf.pos + ray.dir * 1e-4;
        isLastVertexConnectible = isThisVertexConnectible;
    }
    return vec3(0.0);
}

void main() {
/*
    uvec2 threadIdx = gl_GlobalInvocationID.xy;
    uvec2 launchDim = uCamera.filmSize;

    if (threadIdx.x >= launchDim.x || threadIdx.y >= launchDim.y) {
        return;
    }
    vec2 uv = (vec2(threadIdx) + 0.5) / vec2(launchDim);

    vec4 depthNormal = texture(uDepthNormal, uv);
    float depth = depthNormal.x;
    vec3 norm = depthNormal.yzw;

    if (depth == 0.0) {
        imageStore(uIndirectOutput, ivec2(threadIdx), vec4(vec3(0.0), 1.0));
        return;
    }
    uvec2 albedoMatId = texelFetch(uAlbedoMatId, ivec2(threadIdx), 0).rg;
    vec3 albedo = unpackAlbedo(albedoMatId.x);
    int matMeshId = int(albedoMatId.y);
    int matId = matMeshId >> 16;
    
    Ray ray = pinholeCameraSampleRay(uCamera, vec2(uv.x, 1.0 - uv.y), vec2(0));
    uint rng = makeSeed(uCamera.seed + threadIdx.x, threadIdx.y);

    SurfaceInfo surf;
    surf.pos = ray.ori + ray.dir * (depth - 1e-4);
    surf.norm = norm;
    surf.albedo = albedo;
    surf.isLight = false;
    surf.matIndex = matId;

    GRISReservoir resv = uGRISReservoir[index1D(threadIdx)];

    Intersection rcPrevIsec;
    vec3 rcPrevwo;
    vec3 throughput = traceReplayPathForHybridShift(surf, -ray.dir, resv.pathSample.primaryHitRng, rcPrevIsec, rcPrevWo);
    */
}