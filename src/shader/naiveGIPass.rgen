#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "rayTracingLayouts.glsl"
#include "camera.glsl"
#include "GBufferUtil.glsl"
#include "lightSampling.glsl"

layout(location = 0) rayPayloadEXT Intersection rtIsec;
layout(location = 1) rayPayloadEXT bool rtShadowed;

void main() {
    const int MaxTracingDepth = 4;

    vec2 uv = (vec2(gl_LaunchIDEXT.xy) + 0.5) / vec2(gl_LaunchSizeEXT.xy);

    uvec4 GBufferA = texelFetch(uGBufferA, ivec2(gl_LaunchIDEXT.xy), 0);
    uvec4 GBufferB = texelFetch(uGBufferB, ivec2(gl_LaunchIDEXT.xy), 0);

    vec3 albedo = unpackAlbedo(GBufferA.x);
    vec3 norm = uintBitsToFloat(GBufferA.yzw);
    float depth = uintBitsToFloat(GBufferB.x);
    int matIndex = int(GBufferB.y);
    // vec2 motion = unpackSnorm2x16(GBufferB.z);

    if (depth == 0.0) {
        imageStore(uIndirectOutput, ivec2(gl_LaunchIDEXT.xy), vec4(vec3(0.0), 1.0));
        return;
    }
    
    Ray ray = pinholeCameraSampleRay(uCamera, vec2(uv.x, 1.0 - uv.y), vec2(0));
    uint rng = makeSeed(uCamera.frameIndex, uCamera.seed, hash2(gl_LaunchIDEXT.x) + gl_LaunchIDEXT.y);

    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);
    vec3 lastPos;
    float lastBsdfPdf;

    SurfaceInfo surf;
    surf.pos = ray.ori + ray.dir * depth;
    surf.norm = norm;
    surf.albedo = albedo;
    surf.lightIndex = InvalidResourceIdx;
    rtIsec.hit = true;

#pragma unroll
    for (int bounce = 0; bounce < MaxTracingDepth; bounce++) {
        if (bounce > 0) {
            rtIsec.hit = false;

            traceRayEXT(
                /* AS, flags, masks    */ uTLAS, gl_RayFlagsOpaqueEXT, 0xff,
                /* SBT offset & stride */ 0, 0,
                /* miss index          */ 0,
                /* ray attribs         */ ray.ori, MinRayDistance, ray.dir, MaxRayDistance,
                /* payload location    */ 0
            );
            loadSurfaceInfo(rtIsec, surf);
        }

        if (!rtIsec.hit) {
            break;
        }

        if (surf.lightIndex != InvalidResourceIdx) {
            float cosTheta = -dot(ray.dir, surf.norm);

            if (cosTheta > 0) {
                float weight = 1.0;

                if (bounce > 0) {
                    float dist = length(surf.pos - lastPos);
                    float sumPower = uLightSampleTable[0].prob;
                    float lightPdf = luminance(surf.albedo) / sumPower * dist * dist / cosTheta;
                    weight = MISWeight(lastBsdfPdf, lightPdf);
                }
                radiance += surf.albedo * weight * throughput;
            }
            break;
        }

        if (/* sample direct lighting */ bounce > 0)
        {
            const uint shadowRayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;

            vec3 lightRadiance, lightDir;
            float lightDist, lightPdf;

            rtShadowed = true;
            lightRadiance = sampleLight(surf.pos, lightDir, lightDist, lightPdf, rng);

            traceRayEXT(
                /* AS, flags, masks    */ uTLAS, shadowRayFlags, 0xff,
                /* SBT offset & stride */ 0, 0,
                /* miss index          */ 1,
                /* ray attribs         */ surf.pos, MinRayDistance, lightDir, lightDist - 1e-4,
                /* payload location    */ 1
            );

            if (!rtShadowed && lightPdf > 1e-6) {
                float bsdfPdf = absDot(surf.norm, lightDir) * PiInv;
                float weight = MISWeight(lightPdf, bsdfPdf);
                radiance += lightRadiance * (surf.albedo * PiInv) * satDot(surf.norm, lightDir) / lightPdf * weight * throughput;
            }
        }

        ray.dir = sampleCosineWeightedHemisphere(surf.norm, sample2f(rng));
        ray.ori = surf.pos + ray.dir * 1e-4;
        throughput *= surf.albedo;
        lastBsdfPdf = absDot(surf.norm, ray.dir) * PiInv;
        lastPos = surf.pos;
    }
    vec3 prevRadiance = imageLoad(uIndirectOutput, ivec2(gl_LaunchIDEXT.xy)).rgb;
    radiance = (prevRadiance * float(uCamera.frameIndex) + radiance) / (float(uCamera.frameIndex) + 1.0);

    imageStore(uIndirectOutput, ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.0));
}