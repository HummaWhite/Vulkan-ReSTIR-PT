#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "rayTracingLayouts.glsl"
#include "camera.glsl"
#include "GBufferUtil.glsl"
#include "lightSampling.glsl"

layout(location = 0) rayPayloadEXT Intersection rtIntersection;
layout(location = 1) rayPayloadEXT bool rtShadowed;

void main() {
    const int MaxTracingDepth = 4;

    vec2 uv = (vec2(gl_LaunchIDEXT.xy) + 0.5) / vec2(gl_LaunchSizeEXT.xy);

    uvec4 GBufferA = texelFetch(uGBufferA, ivec2(gl_LaunchIDEXT.xy), 0);
    uvec4 GBufferB = texelFetch(uGBufferB, ivec2(gl_LaunchIDEXT.xy), 0);

    vec3 albedo = unpackAlbedo(GBufferA.x);
    vec3 norm = uintBitsToFloat(GBufferA.yzw);
    float depth = uintBitsToFloat(GBufferB.x);
    int matIndex = int(GBufferB.y);
    // vec2 motion = unpackSnorm2x16(GBufferB.z);

    int maxTracingDepth = (depth == 0.0) ? 0 : MaxTracingDepth;
    
    Ray ray = pinholeCameraSampleRay(uCamera, vec2(uv.x, 1.0 - uv.y), vec2(0));
    uint rng = makeSeed(uCamera.frameIndex, uCamera.seed, gl_LaunchIDEXT.x * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.y);

    vec3 radiance = vec3(0.0);
    vec3 throughput = vec3(1.0);

    Intersection isec;
    isec.pos = ray.ori + ray.dir * depth;
    isec.norm = norm;
    isec.albedo = albedo;
    isec.hit = true;
    isec.lightIndex = InvalidResourceIdx;

    for (int bounce = 0; bounce < maxTracingDepth; bounce++) {
        if (bounce > 0) {
            traceRayEXT(
                /* AS, flags, masks    */ uTLAS, gl_RayFlagsOpaqueEXT, 0xff,
                /* SBT offset & stride */ 0, 0,
                /* miss index          */ 0,
                /* ray attribs         */ ray.ori, MinRayDistance, ray.dir, MaxRayDistance,
                /* payload location    */ 0
            );
            isec = rtIntersection;
        }

        if (!isec.hit) {
            break;
        }

        if (isec.lightIndex != InvalidResourceIdx) {
            if (dot(ray.dir, isec.norm) < 0) {
                radiance += isec.albedo * throughput;
            }
            break;
        }

        if (/* sample direct lighting */ false)
        {
            const uint shadowRayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;

            vec3 lightRadiance, lightDir;
            float lightDist, lightPdf;
            uint lightIdx;

            rtShadowed = true;
            lightRadiance = sampleLight(isec.pos, lightDir, lightDist, lightPdf, lightIdx, rng);

            traceRayEXT(
                /* AS, flags, masks    */ uTLAS, shadowRayFlags, 0xff,
                /* SBT offset & stride */ 0, 0,
                /* miss index          */ 1,
                /* ray attribs         */ isec.pos, MinRayDistance, lightDir, lightDist - 1e-4,
                /* payload location    */ 1
            );

            if (!rtShadowed && lightPdf > 1e-6) {
                radiance += lightRadiance * isec.albedo * PiInv * satDot(norm, lightDir) / lightPdf * throughput;
            }
        }

        ray.dir = sampleCosineWeightedHemisphere(isec.norm, sample2f(rng));
        ray.ori = isec.pos + isec.norm * 1e-4;

        throughput *= isec.albedo;
    }
    vec3 prevRadiance = imageLoad(uRayColorOutput, ivec2(gl_LaunchIDEXT.xy)).rgb;

    radiance = (prevRadiance * float(uCamera.frameIndex) + radiance) / (float(uCamera.frameIndex) + 1.0);

    imageStore(uRayColorOutput, ivec2(gl_LaunchIDEXT.xy), vec4(radiance, 1.0));
}